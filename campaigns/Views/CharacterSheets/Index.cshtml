@model Campaigns.Models.CharacterSheet.IndexViewModel

@{
    ViewBag.Title = "Index";
}

<!-- 
    Create New Character Modal
    -->

<div id='creationModal' class='modal fade in'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Create new sheet</h4>
            </div>

            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()

                <div class="modal-body">
                    <div class="form-group">
                        <label for="modalName">Name</label>
                        @Html.LabelFor(m => m.CreateCharacter.Name)
                        @Html.EditorFor(m => m.CreateCharacter.Name)
                        @Html.ValidationMessageFor(m => m.CreateCharacter.Name)
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CreateCharacter.RaceId)
                        @Html.DropDownListFor(m => m.CreateCharacter.RaceId, Model.Races, new { id = "races" })
                        @Html.ValidationMessageFor(m => m.CreateCharacter.RaceId)
                        <p class="help-block" id="races-help"></p>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CreateCharacter.InitialClassId)
                        @Html.DropDownListFor(m => m.CreateCharacter.InitialClassId, Model.Classes, new { id = "classes" })
                        @Html.ValidationMessageFor(m => m.CreateCharacter.InitialClassId)
                        <p class="help-block" id="classes-help"></p>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.CreateCharacter.Level)
                        @Html.EditorFor(m => m.CreateCharacter.Level)
                        @Html.ValidationMessageFor(m => m.CreateCharacter.Level)
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn" data-dismiss="modal">Cancel</button>
                    <input class="btn btn-primary" type="submit" value="Create" />
                </div>
            }
        </div>
    </div>
</div>

<!--
    List View
-->
<h2>Index</h2>

<p>
    <a href="#" data-toggle="modal" data-target="#creationModal">Create New</a>
</p>
@*TODO: implement paging http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application*@
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Characters.FirstOrDefault().Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Characters.FirstOrDefault().RaceName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Characters.FirstOrDefault().Level)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Characters.FirstOrDefault().ShortDescription)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model.Characters) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.RaceName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Level)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.ShortDescription)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>

@section Scripts {
<script>
(function () { 
    function Api() {
        this.rulesApiUri = '/api/rules';
        this.catQueryPromises = {};        
    }

    Api.prototype.uriFor = function (e, id) {
        var self = this;

        var uri = self.rulesApiUri + '/' + e;
        if (typeof id !== 'undefined') {
            uri = uri + '/' + id;
        }
        return uri;
    };

    Api.prototype.query = function (path) {
        var self = this;
        return $.getJSON(self.uriFor(path))
    };

    Api.prototype.getAttributesByCategory = function (category) {
        var self = this;
        var queryPromise = self.catQueryPromises[category];
        if (typeof queryPromise === 'undefined') {
            console.log('retrieving ' + category + ' from server...');
            queryPromise = $.getJSON(self.uriFor(category));
            self.catQueryPromises[category] = queryPromise;
        }

        return queryPromise;
    };

    var api = new Api();

    function bindNewCharacterHelpElement(name) {
        var element = $('#' + name);
        var helpElement = $('#' + name + '-help');

        element.change(handleElementChanged);

        $('#' + name + ' option:first').attr('selected', 'selected');
        handleElementChanged();

        //
        // impl
        //

        function handleElementChanged() {
            // request all attributes and cache them
            var query = api.getAttributesByCategory(name)
               .done(handleCategoryQueryDone)
               .fail(handleQueryFail);

            /*
            // request description each time selection changes
            var selectedId = element.val();
            var path = name + '/' + selectedId;
            api.query(path)
               .done(handleQueryDone)
               .fail(handleQueryFail);
               */
        }

        function handleCategoryQueryDone(results) {
            console.log('... got ' + name + ' response from server: ', results);
            var attrib = $.grep(results, function (e) {
                return e.id == element.val()
            })[0];

            helpElement.html(attrib.description);
        }

        function handleQueryDone(results) {
            helpElement.html(results.description);
        }

        function handleQueryFail(jqXhr, textStatus, err) {
            alert('error: ' + err);
        }
    }

    $(function () {
        @if (Model.IsModalOpen)
        {
            @:$('#creationModal').modal();
        }

        //
        // fill in the 'create character' modal static data
        //
        bindNewCharacterHelpElement('races');
        bindNewCharacterHelpElement('classes');
    });
})();
</script>
}